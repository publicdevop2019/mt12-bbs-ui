{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","style","width","defaultSelectedKeys","defaultOpenKeys","mode","key","title","MailOutlined","process","ItemGroup","Item","icon","AppstoreOutlined","SettingOutlined","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wOAuFeA,MAhFf,WACE,OACE,uBACEC,MAAO,CAAEC,MAAO,KAChBC,oBAAqB,CAAC,KACtBC,gBAAiB,CAAC,QAClBC,KAAK,UAEL,kBAAC,IAAD,CACEC,IAAI,OACJC,MACE,8BACE,kBAACC,EAAA,EAAD,MACA,8BAAOC,UAIX,sBAAMC,UAAN,CAAgBJ,IAAI,KAAKC,MAAM,UAC7B,sBAAMI,KAAN,CAAWL,IAAI,KAAf,YACA,sBAAMK,KAAN,CAAWL,IAAI,KAAf,aAEF,sBAAMI,UAAN,CAAgBJ,IAAI,KAAKC,MAAM,UAC7B,sBAAMI,KAAN,CAAWL,IAAI,KAAf,YACA,sBAAMK,KAAN,CAAWL,IAAI,KAAf,cAGJ,kBAAC,IAAD,CAASA,IAAI,OAAOM,KAAM,kBAACC,EAAA,EAAD,MAAsBN,MAAM,kBACpD,sBAAMI,KAAN,CAAWL,IAAI,KAAf,YACA,sBAAMK,KAAN,CAAWL,IAAI,KAAf,YACA,kBAAC,IAAD,CAASA,IAAI,OAAOC,MAAM,WACxB,sBAAMI,KAAN,CAAWL,IAAI,KAAf,YACA,sBAAMK,KAAN,CAAWL,IAAI,KAAf,cAGJ,kBAAC,IAAD,CACEA,IAAI,OACJC,MACE,8BACE,kBAACO,EAAA,EAAD,MACA,oDAIJ,sBAAMH,KAAN,CAAWL,IAAI,KAAf,YACA,sBAAMK,KAAN,CAAWL,IAAI,MAAf,aACA,sBAAMK,KAAN,CAAWL,IAAI,MAAf,aACA,sBAAMK,KAAN,CAAWL,IAAI,MAAf,gBCzCYS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.62c1bc7c.chunk.js","sourcesContent":["import { AppstoreOutlined, MailOutlined, SettingOutlined } from '@ant-design/icons';\nimport { Menu } from 'antd';\nimport 'antd/es/date-picker/style/css';\nimport SubMenu from 'antd/lib/menu/SubMenu';\nimport React from 'react';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <Menu\n      style={{ width: 256 }}\n      defaultSelectedKeys={['1']}\n      defaultOpenKeys={['sub1']}\n      mode=\"inline\"\n    >\n      <SubMenu\n        key=\"sub1\"\n        title={\n          <span>\n            <MailOutlined />\n            <span>{process.env.REACT_APP_TITEL}</span>\n          </span>\n        }\n      >\n        <Menu.ItemGroup key=\"g1\" title=\"Item 1\">\n          <Menu.Item key=\"1\">Option 1</Menu.Item>\n          <Menu.Item key=\"2\">Option 2</Menu.Item>\n        </Menu.ItemGroup>\n        <Menu.ItemGroup key=\"g2\" title=\"Item 2\">\n          <Menu.Item key=\"3\">Option 3</Menu.Item>\n          <Menu.Item key=\"4\">Option 4</Menu.Item>\n        </Menu.ItemGroup>\n      </SubMenu>\n      <SubMenu key=\"sub2\" icon={<AppstoreOutlined />} title=\"Navigation Two\">\n        <Menu.Item key=\"5\">Option 5</Menu.Item>\n        <Menu.Item key=\"6\">Option 6</Menu.Item>\n        <SubMenu key=\"sub3\" title=\"Submenu\">\n          <Menu.Item key=\"7\">Option 7</Menu.Item>\n          <Menu.Item key=\"8\">Option 8</Menu.Item>\n        </SubMenu>\n      </SubMenu>\n      <SubMenu\n        key=\"sub4\"\n        title={\n          <span>\n            <SettingOutlined />\n            <span>Navigation Three</span>\n          </span>\n        }\n      >\n        <Menu.Item key=\"9\">Option 9</Menu.Item>\n        <Menu.Item key=\"10\">Option 10</Menu.Item>\n        <Menu.Item key=\"11\">Option 11</Menu.Item>\n        <Menu.Item key=\"12\">Option 12</Menu.Item>\n      </SubMenu>\n    </Menu>\n    //   <Router>\n    //   <div>\n    //     <nav>\n    //       <ul>\n    //         <li>\n    //           <Link to=\"/\">Home</Link>\n    //         </li>\n    //         <li>\n    //           <Link to=\"/about\">About</Link>\n    //         </li>\n    //         <li>\n    //           <Link to=\"/users\">Users</Link>\n    //         </li>\n    //       </ul>\n    //     </nav>\n    //     <Switch>\n    //       <Route path=\"/about\">\n    //         <About />\n    //       </Route>\n    //       <Route path=\"/users\">\n    //         <Users />\n    //       </Route>\n    //       <Route path=\"/\">\n    //         <Home />\n    //       </Route>\n    //     </Switch>\n    //   </div>\n    // </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}